#!/usr/bin/env python3
"""
API Key Setup Script for Email Phishing Analysis Agent

This script helps you configure the required API keys for:
1. AWS Bedrock (for Claude 4.5)
2. Elastic MCP Server (for email search and storage)
"""

import os
import sys
import getpass
import boto3
import requests
from pathlib import Path

def check_aws_credentials():
    """Check if AWS credentials are configured"""
    try:
        # Try to create a Bedrock client
        bedrock = boto3.client('bedrock', region_name='us-east-1')
        
        # Try to list available models (this will fail if no access)
        response = bedrock.list_foundation_models()
        
        print("‚úÖ AWS Bedrock access verified")
        print(f"   Region: us-east-1")
        print(f"   Available models: {len(response.get('modelSummaries', []))}")
        return True
        
    except Exception as e:
        print(f"‚ùå AWS Bedrock access failed: {e}")
        return False

def check_elastic_connection(elastic_url, api_key=None):
    """Check if Elastic MCP Server is accessible"""
    try:
        headers = {}
        if api_key:
            headers['Authorization'] = f'Bearer {api_key}'
        
        # Try to connect to the MCP server
        response = requests.get(f"{elastic_url}/health", headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Elastic MCP Server connection verified")
            print(f"   URL: {elastic_url}")
            return True
        else:
            print(f"‚ùå Elastic MCP Server connection failed: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Elastic MCP Server connection failed: {e}")
        return False

def setup_aws_credentials():
    """Interactive setup for AWS credentials"""
    print("\nüîß Setting up AWS Credentials for Bedrock Claude 4.5")
    print("=" * 50)
    
    # Check if credentials are already set
    if os.getenv('AWS_ACCESS_KEY_ID') and os.getenv('AWS_SECRET_ACCESS_KEY'):
        print("AWS credentials found in environment variables.")
        if check_aws_credentials():
            return True
        else:
            print("Existing credentials don't work. Let's set new ones.")
    
    print("\nYou need AWS credentials with Bedrock access.")
    print("Get them from: https://console.aws.amazon.com/iam/")
    print("\nRequired permissions:")
    print("- bedrock:InvokeModel")
    print("- bedrock:ListFoundationModels")
    
    access_key = getpass.getpass("Enter AWS Access Key ID: ").strip()
    secret_key = getpass.getpass("Enter AWS Secret Access Key: ").strip()
    region = input("Enter AWS Region (default: us-east-1): ").strip() or "us-east-1"
    
    # Set environment variables for this session
    os.environ['AWS_ACCESS_KEY_ID'] = access_key
    os.environ['AWS_SECRET_ACCESS_KEY'] = secret_key
    os.environ['AWS_DEFAULT_REGION'] = region
    os.environ['BEDROCK_REGION'] = region
    
    # Test the credentials
    if check_aws_credentials():
        print("\n‚úÖ AWS credentials configured successfully!")
        return True
    else:
        print("\n‚ùå AWS credentials failed. Please check your access key and permissions.")
        return False

def setup_elastic_credentials():
    """Interactive setup for Elastic MCP Server credentials"""
    print("\nüîß Setting up Elastic MCP Server Credentials")
    print("=" * 50)
    
    # Default Elastic URL
    default_url = "https://searchsearch-a9ed61.kb.europe-west1.gcp.elastic.cloud"
    elastic_url = input(f"Enter Elastic MCP Server URL (default: {default_url}): ").strip() or default_url
    
    print("\nElastic API Key (optional but recommended for production)")
    print("Get it from: https://cloud.elastic.co/")
    api_key = getpass.getpass("Enter Elastic API Key (press Enter to skip): ").strip()
    
    if not api_key:
        api_key = None
        print("‚ö†Ô∏è  No API key provided. Some features may not work.")
    
    # Test the connection
    if check_elastic_connection(elastic_url, api_key):
        print("\n‚úÖ Elastic MCP Server configured successfully!")
        return elastic_url, api_key
    else:
        print("\n‚ùå Elastic MCP Server connection failed.")
        return None, None

def create_env_file(elastic_url, elastic_api_key, aws_region):
    """Create .env file with the configured credentials"""
    env_content = f"""# Email Phishing Analysis Agent Configuration
# Generated by setup_api_keys.py

# Elastic MCP Server Configuration
ELASTIC_URL={elastic_url}
ELASTIC_API_KEY={elastic_api_key or 'your_elastic_api_key_here'}

# AWS Bedrock Configuration
BEDROCK_REGION={aws_region}
AWS_ACCESS_KEY_ID={os.getenv('AWS_ACCESS_KEY_ID', 'your_aws_access_key_here')}
AWS_SECRET_ACCESS_KEY={os.getenv('AWS_SECRET_ACCESS_KEY', 'your_aws_secret_key_here')}
AWS_DEFAULT_REGION={aws_region}

# Optional: Logging Configuration
LOG_LEVEL=INFO

# Optional: API Server Configuration
API_HOST=0.0.0.0
API_PORT=8000
"""
    
    env_file = Path('.env')
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Configuration saved to {env_file}")
    return env_file

def test_full_integration():
    """Test the full integration with both services"""
    print("\nüß™ Testing Full Integration")
    print("=" * 30)
    
    try:
        from email_phishing_analyzer import EmailPhishingAnalyzer
        
        # Initialize analyzer
        elastic_url = os.getenv('ELASTIC_URL')
        elastic_api_key = os.getenv('ELASTIC_API_KEY')
        bedrock_region = os.getenv('BEDROCK_REGION', 'us-east-1')
        
        analyzer = EmailPhishingAnalyzer(elastic_url, elastic_api_key, bedrock_region)
        
        # Test with a sample email
        test_email = {
            "sender": "test@example.com",
            "subject": "Test Email",
            "body": {"text": "This is a test email for integration testing."},
            "recipient": "recipient@example.com"
        }
        
        print("Testing email analysis...")
        result = analyzer.analyze_email(test_email)
        
        print(f"‚úÖ Analysis completed successfully!")
        print(f"   Is Phishing: {result.is_phishing}")
        print(f"   Confidence: {result.confidence_score:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        return False

def main():
    """Main setup function"""
    print("üöÄ Email Phishing Analysis Agent - API Key Setup")
    print("=" * 60)
    print("\nThis script will help you configure the required API keys:")
    print("1. AWS Bedrock (for Claude 4.5 AI analysis)")
    print("2. Elastic MCP Server (for email search and storage)")
    
    # Check if .env already exists
    if Path('.env').exists():
        print("\n‚ö†Ô∏è  .env file already exists.")
        overwrite = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Setup AWS credentials
    aws_success = setup_aws_credentials()
    if not aws_success:
        print("\n‚ùå AWS setup failed. Cannot continue without AWS access.")
        return
    
    # Setup Elastic credentials
    elastic_url, elastic_api_key = setup_elastic_credentials()
    if not elastic_url:
        print("\n‚ùå Elastic setup failed. Cannot continue without Elastic access.")
        return
    
    # Create .env file
    aws_region = os.getenv('BEDROCK_REGION', 'us-east-1')
    env_file = create_env_file(elastic_url, elastic_api_key, aws_region)
    
    # Test integration
    print("\n" + "=" * 60)
    test_success = test_full_integration()
    
    if test_success:
        print("\nüéâ Setup completed successfully!")
        print("\nNext steps:")
        print("1. Run the test: python test_agent.py")
        print("2. Start the API server: python mcp_server.py")
        print("3. Use the CLI: python cli.py --help")
    else:
        print("\n‚ö†Ô∏è  Setup completed but integration test failed.")
        print("Check the error messages above and verify your credentials.")
    
    print(f"\nConfiguration saved to: {env_file.absolute()}")

if __name__ == "__main__":
    main()
